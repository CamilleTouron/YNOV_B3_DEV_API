openapi: 3.0.3
info:
  title: Library API
  description: This API manage a bookstore
  contact:
    email: dev@bookstore.com
  version: 1.0.0
servers:
  - url: "{protocol}://{server}"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      server:
        default: localhost:3000
tags:
  - name: books
    description: Everything about Books
  - name: users
    description: Everything about Users
  - name: reviews
    description: Everything about Reviews
paths:
  /users/login:
    post:
      tags:
        - login
      summary: login
      description: login
      operationId: login
      requestBody:
          $ref: "#/components/requestBodies/Login"
          responses:
            "201":
              $ref: "#/components/responses/ResourceCreated"
            "400":
              $ref: "#/components/responses/InvalidBody"
            "500":
              $ref: "#/components/responses/InternalServerError"
      responses:
        "400":
          description: Login failed.
        "404":
          description: User non trouvé avec cet id là.
  /users:
    get:
      tags:
        - user
      summary: Lister les adhérents.
      description: Lister les adhérents de la librairie.
      operationId: getUsers
      responses:
        "200":
          description: Adhérents trouvés.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
            application/xml:
              schema:
                $ref: "#/components/schemas/Users"
        "404":
          description: Adhérent non trouvés.
    post:
      tags:
        - user
      summary: Ajout adhérent.
      description: Ajouter un adhérent à la librairie.
      operationId: addUser
      requestBody:
          $ref: "#/components/requestBodies/UserCreation"
          responses:
            "201":
              $ref: "#/components/responses/ResourceCreated"
            "400":
              $ref: "#/components/responses/InvalidBody"
            "500":
              $ref: "#/components/responses/InternalServerError"
      responses:
        "200":
          description: Adhérent ajouté.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "405":
          description: Body invalid.
  /users/{id}:
    get:
      tags:
        - user
      summary: Retrouver un adhérent par son id.
      description: Retrouver un adhérent par son id.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: id de l'adhérent
          required: true
          schema:
            type: integer
        - name: auth
          in: header
          description: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Adhérent trouvé.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Id invalid.
        "404":
          description: Adhérent non trouvé.
    delete:
      tags:
        - user
      summary: Supprimer un adhérent.
      description: Supprimer un adhérent supprime les avis qu'il a rédiger.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Id de l'adhérent.
          required: true
          schema:
            type: integer
        - name: auth
          in: header
          description: token
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Id invalid.
        "404":
          description: User non trouvé avec cet id là.
  /axios:
    get:
      tags:
        - meteo
      summary: Get meteo
      description: Return meteo
      operationId: getMeteo
      responses:
        "200":
          description: Meteo fetched successfully
  /books:
    get:
      tags:
        - books
      summary: Get all books
      description: Return all books available on the bookstore
      operationId: getAllBooks
      responses:
        "200":
          description: Books fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookList"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - books
      summary: Add a new book to the store
      operationId: addBook
      requestBody:
        $ref: "#/components/requestBodies/BookCreation"
      responses:
        "201":
          $ref: "#/components/responses/ResourceCreated"
        "400":
          $ref: "#/components/responses/InvalidBody"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /books/{id}:
    get:
      tags:
        - books
      summary: Get a book by its id
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Book fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - books
      summary: Delete a book by its id
      operationId: deleteBookById
      parameters:
        - $ref : '#/components/parameters/idInPath'
      responses:
        "200":
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                required: [ success ]
                properties:
                  success:
                    type: boolean
                    example: true
                    default: true
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    idInPath:
      required: true
      name: id
      in: path
      schema:
        type: integer
  schemas:
    UserNew:
          type: object
          properties:
            id:
              type: integer
              example: 10
            firstname:
              type: string
              example: "Touron"
            lastname:
              type: string
              example: "Camille"
            isAdmin:
              type: boolean
              example: "false"
            password:
              type: string
              example: "etvhtrdvtyesvy"
          xml:
            name: User
    User:
        type: object
        properties:
          firstname:
            type: string
            example: "Touron"
          lastname:
            type: string
            example: "Camille"
        xml:
          name: User
    Users:
      type: array
      xml:
        wrapped: true
      items:
        $ref: "#/components/schemas/User"
    BookList:
      type: object
      properties:
        success:
          type: boolean
          default: true
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "My book"
        date:
          type: string
          format: date
          example: "2022-10-25"
    Login:
      type: object
      properties:
        id:
          type: integer
          example: 10
        password:
          type: string
          example: "etvhtrdvtyesvy"
      xml:
        name: login
  requestBodies:
    Login:
      required: true
      description: login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    BookCreation:
      required: true
      description: Book object that needs to be created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
    UserCreation:
      required: true
      description: Book object that needs to be created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserNew'
  responses:
    ResourceCreated:
      description: "The resource has been created"
      content:
        application/json:
          schema:
            type: object
            required : [ success, id ]
            properties:
              success:
                type: boolean
                default: true
                example: true
              id:
                type: integer
                example: 1
                description: "The id of the ressource created"
    NotFound:
      description: "The resource specified is not found"
      content:
        application/json:
          schema:
            type: object
            required: [ success, message ]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: ""
                example: "This ressource with this id is not found"
    InvalidBody:
      description: "The body sent to the request is invalid"
      content:
        application/json:
          schema:
            type: object
            required: [ success, message ]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: ""
                example: "Please make sure that all args on the body are ok"
    InternalServerError:
      description: "An internal server error occurred"
      content:
        application/json:
          schema:
            type: object
            required: [ success, message ]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: "An unknown server error occurred"
                example: "An unknown server error occurred"